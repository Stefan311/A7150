; Copyright (c) 2022, Stefan Berndt
;
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without 
; modification, are permitted provided that the following conditions are met:
; 1. Redistributions of source code must retain the above copyright notice, 
;    this list of conditions and the following disclaimer.
; 2. Redistributions in binary form must reproduce the above copyright notice, 
;    this list of conditions and the following disclaimer in the documentation 
;    and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
; THE POSSIBILITY OF SUCH DAMAGE.


; *********  Firmware fuer IDE-Kontroller AFI-K5173   ***********
; HINWEIS: das ist eine sehr fruehe Alpha-Version 
; Version: 0.3
; Features:
; - Schalterstellungen: 0=MFM, 1=Primary IDE, 2=Secundary IDE
; - IDE-Adressmodus: LBA28 (nicht geeignet fuer sehr alte IDE-Platten)
; - CHS zu LBA Umrechnung mit einstellbaren Parametern
; - Datentransfer mit Z80-DMA in den KES-Buffer
;
; Version Log:
; V0.1
; Basisversion
;
; V0.2
; - Bugfix CHS-LBA Umrechnung
; - IDE Statusabfrage vor Lesen/Schreiben und nach Schreiben
; - einfacher Error-Log
; - verlaengerte Wartezeit beim Initialisieren
;
; V0.3
; - Bugfix Error-Log
; - Geschwindigkeits-Optimierung: CHS2LBA nur noch beim 1. Block, dann nur noch INC_LBA
; ***************************************************************


; Parameter von und zur KES
FUNKTIONSCODE   equ     $3b2e+11
LAUFWERKNR      equ     $3b2e+10
CYLINDER        equ     $3b2e+14
HEAD            equ     $3b2e+16
SECTOR          equ     $3b2e+17        ; werden bei KES-Festplatte von 0 gezaehlt!
BYTECOUNT       equ     $3b2e+4
BUFFER          equ     $3b2e+6
ERRORREG        equ     $3b22

; Speicher fuer AFI
MLBA1           equ     $3a00           ; 48bit=6byte
MSECCOUNT       equ     $3a06
MIDE_STEUER     equ     $3a07           ; 8bit: Kopie des Steuer-Registers, $80=LED2, $40=LED1, $20=Reset, $10=SEL1, $08=Sel0, $04=A2, $02=A1, $01=A0
MIDE_DEVICE     equ     $3a08           ; 8bit: 0=Primary(Master)  $10=Secondary(Slave)
MLBA2           equ     $3a09           ; 48bit=6byte
MHEADCT         equ     $3a10           ; Anzahl Koepfe
MSECTORCT       equ     $3a11           ; Anzahl Sektoren pro Spur
MCYLINDERCT     equ     $3a12           ; Anzahl Zylinder
MDMA_PARAM      equ     $3a40           ; 21 bytes, Kopie von dma_param_st
MBUFFER         equ     $3a42           ; Addresse Sektorbuffer, liegt mit Absicht mittem in den DMA-Parametern
MDMA_DIR        equ     $3a52           ; Transfer-Richtung, liegt mit Absicht mittem in den DMA-Parametern

MERRORSTART     equ     $3510           ; Beginn Errorlog-Ringbuffer
MERRORENDE      equ     $39df           ; Ende Errorlog-Ringbuffer
MERRORPTR       equ     $3500           ; Zeiger auf naechste Addresse im Ringpuffer

; IO-Register
REG_DATA        equ     $B0             ; IO-Port IDE-Daten (Lesen und Schreiben)
REG_STEUER      equ     $B1             ; IO-Port Steuerregister (Schreiben)
REG_SWITCH      equ     $B1             ; IO-Port Steuerregister (Lesen)
REG_RESET       equ     $B2             ; IO-Port 16Bit-Toggler Reset (Lesen)

; Einsprungpunkte von KES-Firmware
                org     $5000
                jp      Chan2           ; Einsprungpunkt von KES-Firmware, wird ausgeloest wenn im Host-System $01 auf Port $1B geschrieben wird
                jp      Reset           ; Einsprungpunkt von KES-Firmware, aufgerufen einmal beim Reset der KES
                jp      Cyclic          ; Einsprungpunkt von KES-Firmware, wird zyklisch aufgerufen

; Service-Routine fuer Kanal 2
Chan2:          scf                     ; Carry gesetzt heisst kein Fertig-Interrupt im Hostsystem ausloesen
                ret

; ***************************************************************
; KES-Reset-Routine
Reset:          in      a,(REG_SWITCH)  ; Betriebsarten-Schalter
                and     a,$f0
                ret     z               ; bei Schalter "0" die AFI nicht initialisieren, fuer Debug hilfreich
                cp      a,$80           ; Schalter "1"
                jr      nz,Reset_0
                ld      a,0             ; primary IDE
                ld      (MIDE_DEVICE),a
                ld      hl,HDDService   
                ld      ($3b6b),hl      ; Jump-Vector HDD Service
                ret

Reset_0:        cp      a,$40           ; Schalter "2"
                jr      nz,Reset_1
                ld      a,$10           ; secundary IDE
                ld      (MIDE_DEVICE),a
                ld      hl,HDDService   
                ld      ($3b6b),hl      ; Jump-Vector HDD Service
                ret

Reset_1:        ret


; ***************************************************************
; Wird zyklisch aufgerufen
Cyclic:         xor     a
                ret


; ***************************************************************
; Service-Routine fuer Festplattenzugriffe
HDDService:     ld      a,(LAUFWERKNR)
                cp      a,1
                jp      nz,HDDService_0

                ld      a,0
                ld      (LAUFWERKNR),a
                jp      $1000

HDDService_0:   ld      a,(FUNKTIONSCODE)
                cp      a,0             ; Init?
                jr      z,HDD_Init
                cp      a,2             ; Format?
                jr      z,HDD_OK
                cp      a,3             ; Sektor-Id lesen?
                jp      z,HDD_SektorId
                cp      a,4             ; Lesen Host?
                jp      z,HDD_Transfer
                cp      a,5             ; Lesen Kes?
                jp      z,HDD_Transfer
                cp      a,6             ; Schreiben Host?
                jp      z,HDD_Transfer
                cp      a,7             ; Schreiben Kes?
                jp      z,HDD_Transfer
                cp      a,8             ; Seek?
                jr      z,HDD_OK
                cp      a,15            ; Diagnostik?
                jr      z,HDD_OK
                ld      bc,$0800        ; alle anderen Funktionen: Errorcode: Parameterfehler
                ld      d,1
                call    ErrorLog
                jp      HDD_Ende

HDD_OK:         ld      bc,0            ; Errorcode: kein Fehler
                jp      HDD_Ende
                

; ***************************************************************
; HDD Initialisieren
HDD_Init:       ld      a,$18           ; IDE-Reset Signal
                out     (REG_STEUER),a
                ld      b,50
HDD_Init_0:     djnz    HDD_Init_0
                ld      a,$f8
                out     (REG_STEUER),a
                ld      (MIDE_STEUER),a

                ld      hl,dma_param_st
                ld      de,MDMA_PARAM
                ld      bc,dma_param_en-dma_param_st
                ldir

                ld      ix,(BUFFER)     ; Festplattenparameter sichern
                ld      a,(ix+0)
                ld      (MCYLINDERCT),a
                ld      a,(ix+1)
                ld      (MCYLINDERCT+1),a
                ld      a,(ix+2)
                ld      (MHEADCT),a
                ld      a,(ix+4)
                ld      (MSECTORCT),a

                ld      d,20
                ld      hl,0
HDD_Init_1:     ld      b,$16
                ld      a,(MIDE_DEVICE)
                or      a,$e0
                call    IDE_Setreg
                ld      c,$17           ; IDE-Statusregister
                call    IDE_Getreg
                and     a,$e1
                cp      a,$40           ; Status: Disk bereit
                jp      z,HDD_OK
                dec     l
                jr      nz,HDD_Init_1
                dec     h
                jr      nz,HDD_Init_1
                dec     d
                jr      nz,HDD_Init_1   ; bis zu 40 Sekunden warten. 
                ld      bc,$4000        ; Errorcode: Device nicht bereit
                ld      d,2
                call    ErrorLog
                jp      HDD_Ende


; ***************************************************************
; Sektor-ID lesen (Fake-Funktion)
HDD_SektorId:   ld      de,(BUFFER)
                ld      hl,HDD_FakeID
                ld      bc,5
                ldir
                jp      HDD_OK

HDD_FakeID:     dw      0               ; Zylinder
                db      0               ; Head
                db      1               ; Sektor
                db      $20             ; Flags: normaler Sektor, 512 bytes


; ***************************************************************
; HDD lesen oder schreiben
HDD_Transfer:   ld      hl,(CYLINDER)   ; Start-CHS muss im ERROR-Register zurueckgegeben werden
                ld      (ERRORREG+3),hl
                ld      hl,(HEAD)       ; das ist auch noch +SEKTOR
                ld      (ERRORREG+5),hl

                ld      hl,(BUFFER)     ; Start-Buffer-Pointer privat speichern, im KES-Parameter-Block soll nicht geaendert werden
                ld      (MBUFFER),hl
                ld      a,(BYTECOUNT+1) ; High-Byte Bytecounter
                sra     a               ; /2, damit haben wir den 512-Byte-Block-Counter
                ld      (MSECCOUNT),a 
                jp      nz,HDD_Transfer_0; Leseversuche mit einzelnen 128-Byte Sektoren gibt hier 0 Sektoren
                ld      bc,$1000        ; wir machen nur 512-Byte-Sektoren, also: Errorcode: Sektor nicht gefunden
                ld      d,3
                call    ErrorLog
                jp      HDD_Ende

HDD_Transfer_0: call    CHS2LBA
HDD_Transfer_1: ld      a,(MIDE_DEVICE)
                ld      b,$16
                call    IDE_Setreg
                ld      c,$17
                call    IDE_Getreg
                bit     6,a
                jp      nz,HDD_Transfer_5
                ld      bc,$4000        ; Errorcode: Device nicht bereit
                ld      d,4
                call    ErrorLog
                jp      HDD_Ende
HDD_Transfer_5: call    SetLBA28
                ld      b,$12           ; IDE-Register: Anzahl Sektoren
                ld      a,1             ; nur ein Sektor
                call    IDE_Setreg
                ld      a,(FUNKTIONSCODE)
                bit     1,a             ; lesen oder schreiben?
                jr      z,HDD_Transfer_2

                ld      a,(MIDE_STEUER)
                or      a,$80           ; LED 2 an
                ld      (MIDE_STEUER),a
                ld      b,$17
                ld      a,$30           ; IDE-Kommando: Sektor schreiben
                call    IDE_Setreg
                call    IDE_Wait4Data
                ld      b,$05           ; DMA Richtung: B-->A
                call    IDE_DMA
                call    IDE_Wait_Rdy                

                jr      HDD_Transfer_3
                
HDD_Transfer_2: ld      a,(MIDE_STEUER)
                or      a,$40           ; LED 1 an
                ld      (MIDE_STEUER),a
                ld      b,$17
                ld      a,$20           ; IDE-Kommando: Sektor lesen
                call    IDE_Setreg
                call    IDE_Wait4Data
                ld      b,$01           ; DMA Richtung: A-->B
                call    IDE_DMA

HDD_Transfer_3: call    IncCHS
                call    IncLBA
                ld      hl,(MBUFFER)
                inc     h
                inc     h
                ld      (MBUFFER),hl
                ld      a,(MSECCOUNT)
                dec     a
                ld      (MSECCOUNT),a
                jr      nz,HDD_Transfer_1; Fertig?

                ld      bc,0            ; Errorcode: kein Fehler
            
; Errorcode (bc) schreiben und Ende
HDD_Ende:       ld      a,(MIDE_STEUER)
                and     a,$3f           ; LEDs aus
                ld      (MIDE_STEUER),a
                out     (REG_STEUER),a

                ld      (ERRORREG),bc
                ld      a,0
                ld      (ERRORREG+2),a
                ld      hl,(CYLINDER)
                ld      (ERRORREG+7),hl
                ld      hl,(HEAD)
                ld      (ERRORREG+9),hl
                ld      a,b
                or      a,c             ; Zero-Flagg=1 heisst fehlerfrei
                scf                     ; Carry gesetzt heisst Diskettenwechsel erkannt
                ccf                     ; ... kann uns aber nicht passieren
                ret


; ***************************************************************
; Warten bis die Platte die Bereitschaft zur Datenuebertragung meldet
IDE_Wait4Data:  ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,$17
                out     (REG_STEUER),a
                ld      b,0
IDE_Wait4Data0: ld      c,b
                ld      b,0
IDE_Wait4Data1: in      a,(REG_RESET)
                in      a,(REG_DATA)
                bit     3,a
                ret     nz
                bit     0,a
                jr      nz,IDE_Wait4Data2
                djnz    IDE_Wait4Data1
                ld      b,c
                djnz    IDE_Wait4Data0
IDE_Wait4Data2: pop     bc
                ld      bc,$1000
                ld      d,5
                call    ErrorLog
                jr      HDD_Ende


; ***************************************************************
; Warten bis die Platte die Beendigung der Operation meldet
IDE_Wait_Rdy:   ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,$17
                out     (REG_STEUER),a
                ld      b,0
IDE_Wait_Rdy_0: ld      c,b
                ld      b,0
IDE_Wait_Rdy_1: in      a,(REG_RESET)
                in      a,(REG_DATA)
                bit     7,a
                ret     z
                bit     0,a
                jr      nz,IDE_Wait_Rdy_2
                djnz    IDE_Wait_Rdy_1
                ld      b,c
                djnz    IDE_Wait_Rdy_0
IDE_Wait_Rdy_2: pop     bc
                ld      bc,$1000
                ld      d,6
                call    ErrorLog
                jr      HDD_Ende

; ***************************************************************
; Setze einzelnes IDE-Register (a)-->Register(b) 
IDE_Setreg:     push    bc
                ld      c,a
                ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,b
                out     (REG_STEUER),a
                in      a,(REG_RESET)
                ld      a,c
                out     (REG_DATA),a
                ld      a,0
                out     (REG_DATA),a
                pop     bc
                ret


; ***************************************************************
; Holt einzelnes IDE-Register Register(c) --> a
IDE_Getreg:     ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,c
                out     (REG_STEUER),a
                in      a,(REG_RESET)
                in      a,(REG_DATA)
                ret


; ***************************************************************
; DMA-Transfer
IDE_DMA:        ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,$30
                out     (REG_STEUER),a
                in      a,(REG_RESET)
                ld      a,b
                ld      (MDMA_DIR),a    ; direkt in die DMA-Parameter speichern
                ld	    c,0             ; DMA-Controller Port
                ld      hl,MDMA_PARAM   ; Addresse DMA-Paramter
                ld      b,dma_param_en-dma_param_st    ; Anzahl DMA-Parameter
                otir
                ret


; ***************************************************************
; CHS in LBA umrechnen: LBA1=(CYLINDER*HEADCT+HEAD)*SECTORCT+SECTOR
CHS2LBA:        ld      a,(MHEADCT)      ; Cylinder * HEADCT
                ld      de,(CYLINDER)
                ld      b,8
                ld      c,0
                ld      hl,0
Mul_16bX8b_0:   sla     l
                rl      h
                rl      c
                sla     a
                jr      nc,Mul_16bX8b_1
                add     hl,de
                jr      nc,Mul_16bX8b_1
                inc     c
Mul_16bX8b_1:   djnz    Mul_16bX8b_0

                ld      a,(HEAD)            ; + HEAD
                ld      e,a
                ld      d,0
                add     hl,de
                jr      nc,Add_32b_0
                inc     bc
Add_32b_0:      ld      (MLBA2),hl
                ld      (MLBA2+2),bc

                ld      a,(MSECTORCT)        ; * SECTORCT
                ld      b,8
                ld      hl,0
                ld      (MLBA1),hl
                ld      (MLBA1+2),hl
                ld      (MLBA1+4),hl
                ld      (MLBA2+4),hl

Mul_48bX8b_0:   ld      c,b
                ld      hl,MLBA1
                ld      b,6
                scf
                ccf
Mul_48bX8b_2:   rl      (hl)
                inc     hl
                djnz    Mul_48bX8b_2

                sla     a
                jr      nc,Mul_48bX8b_1

                ld      de,(MLBA2)
                ld      hl,(MLBA1)
                add     hl,de
                ld      (MLBA1),hl
                ld      de,(MLBA2+2)
                ld      hl,(MLBA1+2)
                adc     hl,de
                ld      (MLBA1+2),hl
                ld      de,(MLBA2+4)
                ld      hl,(MLBA1+4)
                adc     hl,de
                ld      (MLBA1+4),hl

Mul_48bX8b_1:   ld      b,c
                djnz    Mul_48bX8b_0

                ld      a,(SECTOR)          ; + SECTOR
                ld      c,a
                ld      b,0
                ld      hl,(MLBA1)
                add     hl,bc
                ld      (MLBA1),hl
                jr      nc,Add_48b_0
                ld      hl,(MLBA1+2)
                inc     hl
                ld      (MLBA1+2),hl
                jr      nc,Add_48b_0
                ld      hl,(MLBA1+4)
                inc     hl
                ld      (MLBA1+4),hl         ; = LBA
Add_48b_0:      ret


; ***************************************************************
; CHS um eins erhoehen
IncCHS:         ld      a,(SECTOR)
                inc     a
                ld      (SECTOR),a
                ld      b,a
                ld      a,(MSECTORCT)
                cp      a,b
                ret     nz
                ld      a,0
                ld      (SECTOR),a
                ld      a,(HEAD)
                inc     a
                ld      (HEAD),a
                ld      b,a
                ld      a,(MHEADCT)
                cp      a,b
                ret     nz
                ld      a,0
                ld      (HEAD),a
                ld      hl,(CYLINDER)
                inc     hl
                ld      (CYLINDER),hl
                ret

; ***************************************************************
; LBA um eins erhoehen
IncLBA:         ld      hl,(MLBA1)
                inc     hl
                ld      (MLBA1),hl
                ret     nc
                ld      hl,(MLBA1+2)
                inc     hl
                ld      (MLBA1+2),hl
                ret     nc
                ld      hl,(MLBA1+4)
                inc     hl
                ld      (MLBA1+4),hl
                ret

; ***************************************************************
; Setze LBA(28bit) in die IDE-Register
SetLBA28:       ld      a,(MLBA1+3)
                and     a,$0f
                or      a,$e0
                ld      c,a
                ld      a,(MIDE_DEVICE)
                or      a,c
                ld      b,$16
                call    IDE_Setreg
                ld      b,$13
                ld      a,(MLBA1)
                call    IDE_Setreg
                ld      b,$14
                ld      a,(MLBA1+1)
                call    IDE_Setreg
                ld      b,$15
                ld      a,(MLBA1+2)
                jr      IDE_Setreg


; ***************************************************************
; Z80-DMA Parameter
dma_param_st:   db      $C3             ; Reset
                db      $79             ; Transfer B-->A
dma_mem:        dw      $2100           ; Port A Addresse
                dw      $200            ; Block Laenge
                db      $54             ; Port A Memory, Increasing
                db      $4E             ; Port A: 2 Cycle, voll IORQ, voll MREQ, voll RD, halb WR
                db      $68             ; Port B IO, Fixed
                db      $4E             ; Port B: 2 Cycle, voll IORQ, voll MREQ, voll RD, halb WR
                db      $80             ; no INT, no STOP
                db      $BD             ; Conti Mode
                db      REG_DATA        ; Port Low
                db      $00             ; Port High
                db      $12             ; Interrupt am Ende
                db      $10             ; Interropt Vektor
                db      $82             ; READY active High
                db      $CF             ; Load Command
dma_dir:        db      $01             ; Transfer direction
                db      $CF             ; Load
                db      $87             ; Start DMA
dma_param_en:   db      0

; ***************************************************************
; Error Logging
ErrorLog:       push    bc
                ld      bc,(MERRORPTR)
                ld      hl,MERRORENDE
                scf
                sbc     hl,bc
                jr      c,ErrorLog_1
                ld      bc,(MERRORPTR)
                ld      hl,MERRORSTART
                sbc     hl,bc
                jr      c,ErrorLog_2
ErrorLog_1:     ld      hl,MERRORSTART
                ld      (MERRORPTR),hl
ErrorLog_2:     ld      hl,(MERRORPTR)
                pop     bc
                ld      (hl),d
                inc     hl
                ld      (hl),a
                inc     hl
                ld      (hl),c
                inc     hl
                ld      (hl),b
                inc     hl
                ld      a,(FUNKTIONSCODE)
                ld      (hl),a
                inc     hl
                ld      a,(LAUFWERKNR)
                ld      (hl),a
                inc     hl
                ld      a,(CYLINDER)
                ld      (hl),a
                inc     hl
                ld      a,(CYLINDER+1)
                ld      (hl),a
                inc     hl
                ld      a,(HEAD)
                ld      (hl),a
                inc     hl
                ld      a,(SECTOR)
                ld      (hl),a
                inc     hl
                ld      a,(MHEADCT)
                ld      (hl),a
                inc     hl
                ld      a,(MSECTORCT)
                ld      (hl),a
                inc     hl
                ld      a,(MCYLINDERCT)
                ld      (hl),a
                inc     hl
                ld      a,(MCYLINDERCT+1)
                ld      (hl),a
                inc     hl
                ld      a,0
                ld      (hl),a
                inc     hl
                ld      a,0
                ld      (hl),a
                inc     hl
                ld      (MERRORPTR),hl
                ret

; ***************************************************************

                org     $57fc
                db      $10             ; Version 1.0
                db      $51             ; ROM-Kennung: Custom Messplatine Teil 1
                dw      0               ; CRC, diese wird spaeter mit dem CRCTOOL berechnet

                org     $5ffc
                db      $10             ; Version 1.0
                db      $52             ; ROM-Kennung: Custom Messplatine Teil 2
                dw      0               ; CRC, diese wird spaeter mit dem CRCTOOL berechnet


