; Copyright (c) 2022-2023, Stefan Berndt
;
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without 
; modification, are permitted provided that the following conditions are met:
; 1. Redistributions of source code must retain the above copyright notice, 
;    this list of conditions and the following disclaimer.
; 2. Redistributions in binary form must reproduce the above copyright notice, 
;    this list of conditions and the following disclaimer in the documentation 
;    and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
; THE POSSIBILITY OF SUCH DAMAGE.


; *********  Firmware fuer IDE-Kontroller AFI-K5173   ***********
; HINWEISE:
; 1. der CHS-Modus ist nicht mehr Bestandteil der ATA-Spezifikation, allerdings 
;    scheinen auch moderne IDE-Platten diesen Modus immer noch zu unterstuetzen.
; 2. da die aufwaendige CHS-Umrechnung durch die IDE-Platte selber gemacht wird, 
;    ist der CHS-Modus etwas schneller als der LBA-Modus.
; 3. Es sind nur CHS-Parameter Kombinationen erlaubt, die durch die IDE-Interne
;    CHS-Translation erlaubt sind. Welche das sind, haengt von den eingesetzten
;    Festplatten ab. Die meisten Platten, die ich bisher getestet habe, fressen ALLES.
;    Eine will mindestens 8 Koepfe haben.
; 4. Durch die CHS-Translation sind damit Beschriebene Platten relativ gut PC-Kompatibel
; 5. Platten, die mit Version 0.1 beschrieben worden sind, sind ab 0.2 nicht mehr lesbar.
; 6. Der LBA-Modus wird nur verwendet, wenn die gewuenschte CHS-Translation
;    von der Festplatte nicht angenommen wird.
;
; Version: 0.6
; Features:
; - Schalterstellungen: 0=MFM, 1=Primary IDE, 2=Secundary IDE
; - IDE-Adressmodus: CHS oder LBA28
; - Datentransfer mit Z80-DMA direkt in den Hostspeicher (~380KB/s)
; - Unterstuetzung des Kanal B fuer den USB-Kontroller
;
; Version Log:
; V0.1
; Basisversion abgeleitet von IDE(LBA) V0.3 / V0.4
; V0.2
; Diese Version nutzt jetzt das CHS-Translation Feature der IDE-Platten
; V0.3
; Support zur Nutzung des Kanal B fuer den USB-Kontroller
; V0.4
; Mehrere IDE-Sektoren am Stueck verarbeiten
; DMA-Transfers direkt in den Hostspeicher
; Debug-Log entfernt
; V0.5
; Unterstuetzung fuer LBA Addressmodus aus IDE(LBA) V0.4 importiert
; Automatische Auswahl, ob CHS oder LBA verwendet wird
; Das LED-Leuchten ist etwas verlaengert, damit die LED's etwas besser erkennbar sind
; Bugfix: Stiller CHS-Translation Fail, wenn Platte die Translation nicht annimmt
; Bugfix: Fehlernder Sektor-Inhalt bei DMA-Transfers, wenn die Sektorgrenze genau an der Segmentgrenze liegt
; V0.6
; Paralell zur IDE-Platte die Koepfe der MFM-Platte bewegen, fuer Schauzwecke, dieses Feature ist standardmaessig deaktiviert

; ***************************************************************
; Schalter fuer Features:
CHAN2Interface  equ     1               ; 0 = deaktivieren, 1 = aktivieren
ForceCHS        equ     0               ; 1 = CHS erzwingen
ForceLBA        equ     0               ; 1 = LBA erzwingen
MoveMFM         equ     0               ; 1 = Kopfbewegung auf der MFM-Festplatte


; ***************************************************************
; Parameter von und zur KES
ERRORREG        equ     $3b22
BYTECOUNT       equ     $3b2e+4
BUFFER          equ     $3b2e+6
FUNKTIONSCODE   equ     $3b2e+11
LAUFWERKNR      equ     $3b2e+10
CYLINDER        equ     $3b2e+14
HEAD            equ     $3b2e+16
SECTOR          equ     $3b2e+17        ; werden bei KES-Festplatte von 0 gezaehlt!
KHOSTOFS        equ     $3b2e+18        ; Buffer im HOST-Speicher, schon in KES-Mapping umgerechnet, MEM-Teil
KHOSTSEG        equ     $3b2e+20        ; Buffer im HOST-Speicher, schon in KES-Mapping umgerechnet, IO-Teil
ALLBYTECOUNT    equ     $3b2e+22        ; Gesamtanzahl bytes


; Speicher fuer AFI
MLBA1           equ     $3a00           ; 48bit=6byte
MSECCOUNT       equ     $3a06
MIDE_STEUER     equ     $3a07           ; 8bit: Kopie des Steuer-Registers, $80=LED2, $40=LED1, $20=Reset, $10=SEL1, $08=Sel0, $04=A2, $02=A1, $01=A0
MIDE_DEVICE     equ     $3a08           ; 8bit: 0=Primary(Master)  $10=Secondary(Slave)
MLBA2           equ     $3a09           ; 48bit=6byte
MHEADCT         equ     $3a10           ; Anzahl Koepfe
MSECTORCT       equ     $3a11           ; Anzahl Sektoren pro Spur
MCYLINDERCT     equ     $3a12           ; Anzahl Zylinder
MACCMODE        equ     $3a14           ; $00=CHS $01=LBA
MLEDRTIMER      equ     $3a15           ; Leuchtzeit der Lese-LED verlaengern
MLEDWTIMER      equ     $3a16           ; Leuchtzeit der Schreib-LED verlaengern
M_MFM_MOVE      equ     $3a17           ; 1=MFM-Festplatte ist angeschlossen


MDMA_PARAM      equ     $3a40           ; 21 bytes, Kopie von dma_param_st
MDMA_MEM_ADR    equ     MDMA_PARAM+2
MDMA_BLK_LEN    equ     MDMA_PARAM+4
MDMA_MEM_FLAG   equ     MDMA_PARAM+7
MDMA_MUX_FLAG   equ     MDMA_PARAM+16
MDMA_DIR        equ     MDMA_PARAM+18
MDMA_PAR_COUNT  equ     21*256

; IO-Register
REG_DATA        equ     $B0             ; IO-Port IDE-Daten (Lesen und Schreiben)
REG_STEUER      equ     $B1             ; IO-Port Steuerregister (Schreiben)
REG_SWITCH      equ     $B1             ; IO-Port Steuerregister (Lesen)
REG_RESET       equ     $B2             ; IO-Port 16Bit-Toggler Reset (Lesen)
REG_HOSTSEL     equ     $1C             ; IO-Port Hostspeicher Bit 14-19
REG_USB         equ     $B3             ; IO-Port USB-Platine
REG_MFM_CylL    equ     $A4             ; IO-Port MFM Zylinder Low
REG_MFM_CylH    equ     $A5             ; IO-Port MFM Zylinder High
REG_MFM_Status  equ     $A7             ; IO-Port MFM Status (Lesen)
REG_MFM_Cmd     equ     $A7             ; IO-Port MFM Kommando (Schreiben)
REG_MFM_SDH     equ     $A8             ; IO-Port MFM SDH (Schreiben)


; ***************************************************************
; Einsprungpunkte von KES-Firmware
                org     $5000
                jp      Chan2           ; Einsprungpunkt von KES-Firmware, wird ausgeloest wenn im Host-System $01 auf Port $1B geschrieben wird
                jp      Reset           ; Einsprungpunkt von KES-Firmware, aufgerufen einmal beim Reset der KES
                jp      Cyclic          ; Einsprungpunkt von KES-Firmware, wird zyklisch aufgerufen


; ***************************************************************
; KES-Reset-Routine
Reset:          ld      a,$38
                out     (REG_STEUER),a
                ld      (MIDE_STEUER),a

                ld      hl,dma_param_st
                ld      de,MDMA_PARAM
                ld      bc,dma_param_en-dma_param_st
                ldir
                
    if  CHAN2Interface=1
                call    Chan2Reset
    endif

                in      a,(REG_SWITCH)  ; Betriebsarten-Schalter
                and     a,$f0
                ret     z               ; bei Schalter "0" die AFI nicht initialisieren
                cp      a,$10           ; Schalter "1"
                jr      nz,Reset_1
                ld      a,0             ; primary IDE
                ld      (MIDE_DEVICE),a
                ld      hl,HDDService   
                ld      ($3b6b),hl      ; Jump-Vector HDD Service
                ret
Reset_1:        cp      a,$20           ; Schalter "2"
                jr      nz,Reset_2
                ld      a,$10           ; secundary IDE
                ld      (MIDE_DEVICE),a
                ld      hl,HDDService   
                ld      ($3b6b),hl      ; Jump-Vector HDD Service
                ret
Reset_2:        ret


; ***************************************************************
; Wird zyklisch aufgerufen, realisiert "nachleuchten" der LED's
Cyclic:         ld      hl,MLEDRTIMER
                xor     a,a
                or      a,(hl)
                jr      z,Cyclic_1
                dec     (hl)
                jr      nz,Cyclic_1
                ld      a,(MIDE_STEUER)
                and     a,$bf
                out     (REG_STEUER),a
                ld      (MIDE_STEUER),a
Cyclic_1:       inc     hl                
                xor     a,a
                or      a,(hl)
                ret     z
                dec     (hl)
                jr      nz,Cyclic_2
                ld      a,(MIDE_STEUER)
                and     a,$7f
                out     (REG_STEUER),a
                ld      (MIDE_STEUER),a
Cyclic_2:       xor     a
                ret


; ***************************************************************
; Service-Routine fuer Festplattenzugriffe
HDDService:     ld      a,(LAUFWERKNR)
                cp      a,1
                jp      nz,HDDService_0

                ld      a,0
                ld      (LAUFWERKNR),a
                jp      $1000

HDDService_0:   ld      a,(FUNKTIONSCODE)
                cp      a,0             ; Init?
                jr      z,HDD_Init
                cp      a,2             ; Format?
                jr      z,IDE_OKEnde
                cp      a,3             ; Sektor-Id lesen?
                jp      z,HDD_SektorId
                cp      a,4             ; Lesen Host?
                jp      z,IDE_Transfer
                cp      a,5             ; Lesen Kes?
                jp      z,IDE_Transfer
                cp      a,6             ; Schreiben Host?
                jp      z,IDE_Transfer
                cp      a,7             ; Schreiben Kes?
                jp      z,IDE_Transfer
                cp      a,8             ; Seek?
                jr      z,IDE_OKEnde
                cp      a,15            ; Diagnostik?
                jr      z,IDE_OKEnde
                ld      bc,$0800        ; alle anderen Funktionen: Errorcode: Parameterfehler


; ***************************************************************
; Errorcode (bc) schreiben und Ende
Service_Ende:   ld      (ERRORREG),bc
                ld      a,0
                ld      (ERRORREG+2),a
                ld      hl,(CYLINDER)
                ld      (ERRORREG+7),hl
                ld      hl,(HEAD)
                ld      (ERRORREG+9),hl
                ld      a,b
                or      a,c             ; Zero-Flagg=1 heisst fehlerfrei, Carry-Flag=0 heisst kein Diskwechsel
                ret

IDE_OKEnde:     ld      bc,0            ; Errorcode: kein Fehler
                jr      Service_Ende
IDE_ReadOnly:   ld      bc,$8000        ; Errorcode: Schreibschutz aktiv
                jr      Service_Ende
IDE_NotReady:   ld      bc,$4000        ; Errorcode: Device nicht bereit
                jr      Service_Ende
IDE_NotFound:   ld      bc,$1000        ; Errorcode: Sektor nicht gefunden
                jr      Service_Ende

; ***************************************************************
; HDD Initialisieren
HDD_Init:       ld      ix,(BUFFER)     ; Festplattenparameter sichern
                ld      a,(ix+0)
                ld      (MCYLINDERCT),a
                ld      a,(ix+1)
                ld      (MCYLINDERCT+1),a
                ld      a,(ix+2)
                ld      (MHEADCT),a
                ld      a,(ix+4)
                ld      (MSECTORCT),a

                ld      d,5
                ld      hl,0
HDD_Init_1:     ld      b,$16
                ld      a,(MIDE_DEVICE)
                or      a,$e0
                call    IDE_Setreg
                ld      c,$17           ; IDE-Statusregister
                call    IDE_Getreg
                and     a,$e0
                cp      a,$40           ; Status: Disk bereit
                jp      z,HDD_Init_2
                dec     l
                jr      nz,HDD_Init_1
                dec     h
                jr      nz,HDD_Init_1
                dec     d
                jr      nz,HDD_Init_1   ; bis zu 40 Sekunden warten. 
                jr      IDE_NotReady

HDD_Init_2:

    if MoveMFM=1
                xor     a
                ld      (M_MFM_MOVE),a  ; Move MFM erstmal deaktivieren
                ld      b,a
                ld      a,$48           ; erste MFM-Platte aktivieren, MFM-HDD-LED an, MFM-DMA deaktivieren
                out     (REG_MFM_SDH),a
MFM_Init_1:     djnz    MFM_Init_1      ; die Aktivierung dauert etwas
                out     (REG_MFM_CylL),a ; wir probieren, etwas in ein MFM-Register zu schreiben
                in      a,(REG_MFM_CylL) ; wieder auslesen
                cp      a,$48           ; hat das Register gespeichert?
                jr      nz,MFM_Init_5   ; nein? dann ist der MFM-Kontroller nicht mehr da.
                ld      a,$10           ; MFM-Kommando: restore (init)
                out     (REG_MFM_Cmd),a
                ld      hl,0            ; Warten
MFM_Init_2:     in      a,(REG_MFM_Status) ; Status auslesen
                cp      a,$50
                jr      z,MFM_Init_4    ; Ende und OK? Dann fertig
                dec     l
                jr      nz,MFM_Init_2
                dec     h
                jr      nz,MFM_Init_2
                jr      MFM_Init_5
MFM_Init_4:     ld      a,1             ; Move MFM aktivieren
                ld      (M_MFM_MOVE),a
MFM_Init_5:     ld      a,$60           ; erste MFM-Platte wieder deaktivieren, MFM-HDD-LED wieder aus
                out     (REG_MFM_SDH),a
    endif

    if ForceLBA=0
                ld      ix,(BUFFER)
                ld      a,(ix+2)        ; Heads
                dec     a
                and     a,$0f
                ld      b,a
                ld      a,(MIDE_DEVICE)
                or      a,$a0
                or      a,b
                ld      b,$16
                call    IDE_Setreg      ; ins DEV/Head-Register
                ld      a,(ix+4)        ; Sektoren/Spur
                ld      b,$12
                call    IDE_Setreg      ; ins Sektorcount-Register
                ld      a,$91           ; Kommando: Initialize Device Parameters
                ld      b,$17
                call    IDE_Setreg      ; ins Kommando-Register
                call    IDE_Wait_Rdy
                
                ld      c,$17           ; IDE-Statusregister
                call    IDE_Getreg
                and     a,$01           ; Fehlerstatus: CHS-Translation angenommen?
                ld      (MACCMODE),a
    endif
    
    if ForceCHS=1
                jr      nz,IDE_NotReady ; Wenn kein LBA verwendet werden darf, dann Fehler weitermelden
    endif

                jr      IDE_OKEnde

; ***************************************************************
; Sektor-ID lesen (Fake-Funktion)
HDD_SektorId:   ld      de,(BUFFER)
                ld      hl,HDD_FakeID
                ld      bc,5
                ldir
                jr      IDE_OKEnde

HDD_FakeID:     dw      0               ; Zylinder
                db      0               ; Head
                db      1               ; Sektor
                db      $20             ; Flags: normaler Sektor, 512 bytes

; ***************************************************************
; HDD lesen oder schreiben vorbereiten
IDE_Transfer:   ld      e,a

                ld      hl,(CYLINDER)   ; Start-CHS muss im ERROR-Register zurueckgegeben werden
                ld      (ERRORREG+3),hl
                
    if MoveMFM=1
                ld      a,(M_MFM_MOVE)  ; Ist das Move MFM aktiviert?
                cp      a,1
                jr      nz,MFM_Move_2   ; Nein? Dann eben nicht.
                ld      a,$48
                out     (REG_MFM_SDH),a ; MFM DSEL 1 (und MFM-LED)
                ld      b,0
MFM_Move_0:     djnz    MFM_Move_0      ; kurz warten
                in      a,(REG_MFM_Status)
                cp      a,$50           ; Status: ready?
                jr      nz,MFM_Move_2   ; Nein, dann lassen wir das MFM in Ruhe
                ld      a,l             ; Zylindernummer in die MFM-Register schreiben
                out     (REG_MFM_CylL),a
                ld      a,h
                and     a,$01           ; nur bis Zylinder 511
                out     (REG_MFM_CylH),a
                ld      a,$70           ; MFM-Kommando: SEEK Zylinder
                out     (REG_MFM_Cmd),a
                ld      hl,$8000        ; Warten
MFM_Move_1:     in      a,(REG_MFM_Status)
                cp      a,$50
                jr      z,MFM_Move_2    ; Status: fertig?
                dec     l
                jr      nz,MFM_Move_1
                dec     h
                jr      nz,MFM_Move_1
                ld      a,$c0           ; die Zeit ist um! Irgendwas ist hier schief gelaufen
                out     (REG_MFM_SDH),a ; MFM-Kontroller resetten
                xor     a               ; Move MFM deaktivieren
                ld      (M_MFM_MOVE),a
MFM_Move_2:
    endif
                
                ld      hl,(HEAD)       ; das ist auch noch +SEKTOR
                ld      (ERRORREG+5),hl

                ld      a,(ALLBYTECOUNT+1) ; High-Byte Bytecounter (Gesamtauftrag)
                bit     0,e
                jr      z,IDE_Trans_1
                ld      a,(BYTECOUNT+1) ; High-Byte Bytecounter (Einzelauftrag)
IDE_Trans_1:    srl     a               ; *2, damit haben wir den 512-Byte-Block-Counter
                jr      z,IDE_NotFound
                ld      (MSECCOUNT),a

IDE_Trans_2:    call    IDE_CheckReady
                jr      z,IDE_NotReady
                ld      a,5
                bit     1,e             ; Lesefunktion?
                jr      nz,IDE_Trans_3
                ld      b,$40           ; LED 1 an
                ld      (MLEDRTIMER),a
IDE_Trans_3:    bit     1,e             ; Schreibfunktion?
                jr      z,IDE_Trans_4
                ld      b,$80           ; LED 2 an
                ld      (MLEDWTIMER),a
IDE_Trans_4:    ld      a,(MIDE_STEUER)
                or      a,b
                ld      (MIDE_STEUER),a
                
    if ForceLBA=1                       ; nur LBA
                call    CHS2LBA
                call    IDE_SetLBA28
    endif

    if ForceCHS=1                       ; nur CHS
                call    IDE_SetCHS
    endif

    if (ForceLBA=0) & (ForceCHS=0)      ; Automatische Auswahl ob CHS oder LBA
                ld      a,(MACCMODE)
                bit     0,a
                jr      z,IDE_Trans_5
                call    CHS2LBA
                call    IDE_SetLBA28
                jr      IDE_Trans_6
IDE_Trans_5:    call    IDE_SetCHS
IDE_Trans_6:
    endif
    
                ld      a,$20           ; IDE-Kommando: Sektor lesen (CHS/LBA28)
                bit     1,e
                jr      z,IDE_Trans_8
                ld      a,$30           ; IDE-Kommando: Sektor schreiben (CHS/LBA28)
IDE_Trans_8:    ld      b,$17
                call    IDE_Setreg
IDE_Trans_9:    call    IDE_Wait4Data
                jr      nc,IDE_NotReady
                bit     0,e
                jr      z,IDE_Trans_10
                call    IDE_KES_DMA
                jr      nc,IDE_NotFound
                call    IDE_AddCHS
                jr      IDE_OKEnde

IDE_Trans_10:   call    IDE_HOST_DMA
                ld      bc,0            ; Errorcode: Kein Fehler
                jr      c,IDE_Trans_11
                ld      bc,$1000        ; Errorcode: Sektor nicht gefunden
IDE_Trans_11:   ld      (ERRORREG),bc
    if MoveMFM=1
                ld      a,$60
                out     (REG_MFM_SDH),a
    endif
                xor     a
                ld      (ERRORREG+2),a
                ld      a,(MSECCOUNT)
                sla     a
                ld      d,a
                ld      e,0             ; Anzahl verbleibende Bytes nach DE, wird in $0B1F verarbeitet
                pop     hl              ; Ruecksprung zu $0BD5
                pop     hl              ; Ruecksprung zu $09A3 / $09EF
                jr      $0B1F           ; Bytecounter und Fehlerstatus zum Host kopieren und Ende


; ***************************************************************
; DMA vom/zum KES-Speicher
IDE_KES_DMA:    ld      a,$4E           ; Port A: 2 Cycle, voll IORQ, voll MREQ, voll RD, halb WR
                ld      (MDMA_MEM_FLAG),a
                ld      a,$82           ; READY active High
                ld      (MDMA_MUX_FLAG),a
                ld      hl,(BUFFER)
                ld      (MDMA_MEM_ADR),hl
                ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,$30
                out     (REG_STEUER),a  ; Daten-Register anwaehlen
                in      a,(REG_RESET)
                ld      a,$01           ; DMA Richtung: A-->B
                bit     1,e
                jr      z,IDE_KES_DMA_1
                ld      a,$05           ; DMA Richtung: B-->A
IDE_KES_DMA_1:  ld      (MDMA_DIR),a
                ld      hl,MDMA_PARAM   ; Addresse DMA-Paramter
                ld      bc,MDMA_PAR_COUNT; Anzahl DMA-Parameter und Controller-Port (0)
                otir
                ld      a,$01           ; Port A: 3 Cycle, halb IORQ, halb MREQ, halb RD, halb WR
                ld      (MDMA_MEM_FLAG),a
                ld      a,$92           ; READY active High, multiplexed
                ld      (MDMA_MUX_FLAG),a
IDE_KES_DMA_2:  ld      a,(MSECCOUNT)
                dec     a
                ld      (MSECCOUNT),a   ; Sektor-Anzahl runterzaehlen
                jr      z,IDE_KES_DMA_3
                call    IDE_Wait4Data
                ret     nc
                ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,$30
                out     (REG_STEUER),a  ; wieder Daten-Register anwaehlen
                in      a,(REG_RESET)
                ld      a,$83           ; DMA-Kommando: Stop
                out     (0),a
                ld      a,$D3           ; DMA-Kommando: Continue (resettet den Bytecounter)
                out     (0),a
                ld      a,$87           ; DMA-Kommando: Start
                out     (0),a
                jr      IDE_KES_DMA_2
IDE_KES_DMA_3:  bit     1,e
                scf
                ret     z
                jp      IDE_Wait_Rdy	; bei Schreiben auf fertig-Meldung warten


; ***************************************************************
; DMA direkt vom/zum Host-Speicher
IDE_HOST_DMA:   ld      hl,(KHOSTOFS)
                ld      (MDMA_MEM_ADR),hl
                ld      a,(KHOSTSEG)
                out     (REG_HOSTSEL),a
                ld      a,$01           ; DMA Richtung: A-->B
                bit     1,e
                jr      z,IDE_HOST_DMA_1
                ld      a,$05           ; DMA Richtung: B-->A
IDE_HOST_DMA_1: ld      (MDMA_DIR),a

                res     7,e             ; Flag: DMA Continue moeglich = nein
IDE_HOST_DMA_2: call    IDE_Wait4Data
                ret     nc

                ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,$30
                out     (REG_STEUER),a  ; Daten-Register anwaehlen
                in      a,(REG_RESET)

                ld      hl,(MDMA_MEM_ADR)
                ld      bc,512
                add     hl,bc
                jr      nc,IDE_HOST_DMA_4 ; Ganzer Sektor?

                push    hl
                ld      a,(MDMA_MEM_ADR)
                xor     a,$FF
                ld      (MDMA_BLK_LEN),a
                ld      a,(MDMA_MEM_ADR+1)
                xor     a,$FF
                ld      (MDMA_BLK_LEN+1),a

                ld      hl,MDMA_PARAM    ; Addresse DMA-Paramter
                ld      bc,MDMA_PAR_COUNT; Anzahl DMA-Parameter und Controller-Port (0)
                otir

                ld      hl,$C000
                ld      (MDMA_MEM_ADR),hl
                ld      a,(KHOSTSEG)
                inc     a
                ld      (KHOSTSEG),a
                out     (REG_HOSTSEL),a
                pop     hl
                ld      a,h
                or      a,l
                jr      z,IDE_HOST_DMA_3
                dec     hl
                ld      (MDMA_BLK_LEN),hl
                ld      hl,MDMA_PARAM    ; Addresse DMA-Paramter
                ld      bc,MDMA_PAR_COUNT; Anzahl DMA-Parameter und Controller-Port (0)
                otir

                ld      hl,(MDMA_MEM_ADR)
                ld      bc,(MDMA_BLK_LEN)
                add     hl,bc
                inc     hl
                ld      (MDMA_MEM_ADR),hl

IDE_HOST_DMA_3: res     7,e              ; Flag: DMA Continue moeglich = nein
                ld      bc,511
                ld      (MDMA_BLK_LEN),bc
                jr      IDE_HOST_DMA_7

IDE_HOST_DMA_4: bit     7,e             ; Flag: DMA Continue moeglich ?
                jr      nz,IDE_HOST_DMA_5
                ld      hl,MDMA_PARAM    ; Addresse DMA-Paramter
                ld      bc,MDMA_PAR_COUNT; Anzahl DMA-Parameter und Controller-Port (0)
                otir
                jr      IDE_HOST_DMA_6

IDE_HOST_DMA_5: ld      a,$83           ; DMA-Kommando: Stop
                out     (0),a
                ld      a,$D3           ; DMA-Kommando: Continue (resettet den Bytecounter)
                out     (0),a
                ld      a,$87           ; DMA-Kommando: Start
                out     (0),a

IDE_HOST_DMA_6: ld      hl,(MDMA_MEM_ADR)
                ld      bc,512
                add     hl,bc
                ld      (MDMA_MEM_ADR),hl
                set     7,e             ; Flag: DMA Continue moeglich = ja
IDE_HOST_DMA_7: ld      a,(MSECCOUNT)
                dec     a
                ld      (MSECCOUNT),a   ; Sektor-Anzahl runterzaehlen
                jr      nz,IDE_HOST_DMA_2
                ld      a,(FUNKTIONSCODE)
                bit     1,a
                scf
                ret     z
                jp      IDE_Wait_Rdy	; bei Schreiben auf fertig-Meldung warten


; ***************************************************************
IDE_CheckReady: ld      a,(MIDE_DEVICE)
                ld      b,$16
                call    IDE_Setreg
IDE_CheckRdy_2: ld      c,$17
                call    IDE_Getreg
                bit     3,a
                jp      z,IDE_CheckRdy_3
                ld      a,(MIDE_STEUER)
                and     a,$E0
                out     (REG_STEUER),a
                ld      hl,$8000
                ld      c,REG_DATA
                ld      b,0
                inir
                otir
                jr      IDE_CheckRdy_2
IDE_CheckRdy_3: bit     6,a
                ret


; ***************************************************************
; Warten bis die Platte die Bereitschaft zur Datenuebertragung meldet
; Error wenn Carry=0
IDE_Wait4Data:  ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,$17
                out     (REG_STEUER),a
                ld      b,0
IDE_Wait4Data0: ld      c,b
                ld      b,0
IDE_Wait4Data1: in      a,(REG_RESET)
                in      a,(REG_DATA)
                bit     0,a
                jr      z,IDE_Wait4Data3
                bit     7,a
                jr      z,IDE_Wait4Data2
IDE_Wait4Data3: bit     3,a
                scf
                ret     nz
                djnz    IDE_Wait4Data1
                ld      b,c
                djnz    IDE_Wait4Data0
IDE_Wait4Data2: xor     a,a
                ret


; ***************************************************************
; Warten bis die Platte die Beendigung der Operation meldet
; Error wenn Carry=0
IDE_Wait_Rdy:   ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,$17
                out     (REG_STEUER),a
                ld      b,0
IDE_Wait_Rdy_0: ld      c,b
                ld      b,0
IDE_Wait_Rdy_1: in      a,(REG_RESET)
                in      a,(REG_DATA)
                bit     7,a
                scf
                ret     z
                bit     0,a
                jr      nz,IDE_Wait_Rdy_2
                djnz    IDE_Wait_Rdy_1
                ld      b,c
                djnz    IDE_Wait_Rdy_0
IDE_Wait_Rdy_2: xor     a,a
                ret


    if ForceLBA=0
; ***************************************************************
; Setze CHS in die IDE-Register
IDE_SetCHS:     ld      a,(HEAD)
                and     a,$0f
                or      a,$a0
                ld      c,a
                ld      a,(MIDE_DEVICE)
                or      a,c
                ld      b,$16
                call    IDE_Setreg
                ld      b,$13
                ld      a,(SECTOR)
                inc     a
                call    IDE_Setreg
                ld      b,$14
                ld      a,(CYLINDER)
                call    IDE_Setreg
                ld      b,$15
                ld      a,(CYLINDER+1)
                call    IDE_Setreg
                ld      a,(MSECCOUNT)
                ld      b,$12
                jr      IDE_Setreg
    endif


; ***************************************************************
; Setze einzelnes IDE-Register (a)-->Register(b) 
IDE_Setreg:     ex      af,af'
                ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,b
                out     (REG_STEUER),a
                in      a,(REG_RESET)
                ex      af,af'
                out     (REG_DATA),a
                ld      a,0
                out     (REG_DATA),a
                ret


; ***************************************************************
; Holt einzelnes IDE-Register Register(c) --> a
IDE_Getreg:     ld      a,(MIDE_STEUER)
                and     a,$E0
                or      a,c
                out     (REG_STEUER),a
                in      a,(REG_RESET)
                in      a,(REG_DATA)
                ret


; ***************************************************************
; CHS um die Anzahl der Sektoren erhoehen
IDE_AddCHS:     ld      a,(SECTOR)
                ld      b,a
                ld      a,(MSECTORCT)
                ld      c,a
                ld      a,(BYTECOUNT+1)
                sra     a
                add     a,b
                ld      (SECTOR),a
                sub     a,c
                jr      z,IDE_AddCHS_1
                ret     c
IDE_AddCHS_1:   ld      (SECTOR),a
                ld      a,(HEAD)
                inc     a
                ld      (HEAD),a
                ld      b,a
                ld      a,(MHEADCT)
                cp      a,b
                ret     nz
                ld      a,0
                ld      (HEAD),a
                ld      hl,(CYLINDER)
                inc     hl
                ld      (CYLINDER),hl
                ret


    if ForceCHS=0
; ***************************************************************
; Setze LBA(28bit) in die IDE-Register
IDE_SetLBA28:   ld      a,(MLBA1+3)
                and     a,$0f
                or      a,$e0
                ld      c,a
                ld      a,(MIDE_DEVICE)
                or      a,c
                ld      b,$16
                call    IDE_Setreg
                ld      b,$13
                ld      a,(MLBA1)
                call    IDE_Setreg
                ld      b,$14
                ld      a,(MLBA1+1)
                call    IDE_Setreg
                ld      b,$15
                ld      a,(MLBA1+2)
                call    IDE_Setreg
                ld      a,(MSECCOUNT)
                ld      b,$12
                jr      IDE_Setreg


; ***************************************************************
; CHS in LBA umrechnen: LBA1=(CYLINDER*HEADCT+HEAD)*SECTORCT+SECTOR
CHS2LBA:        exx
                ld      a,(MHEADCT)      ; Cylinder * HEADCT
                ld      de,(CYLINDER)
                ld      b,8
                ld      c,0
                ld      hl,0
Mul_16bX8b_0:   sla     l
                rl      h
                rl      c
                sla     a
                jr      nc,Mul_16bX8b_1
                add     hl,de
                jr      nc,Mul_16bX8b_1
                inc     c
Mul_16bX8b_1:   djnz    Mul_16bX8b_0

                ld      a,(HEAD)            ; + HEAD
                ld      e,a
                ld      d,0
                add     hl,de
                jr      nc,Add_32b_0
                inc     bc
Add_32b_0:      ld      (MLBA2),hl
                ld      (MLBA2+2),bc

                ld      a,(MSECTORCT)        ; * SECTORCT
                ld      b,8
                ld      hl,0
                ld      (MLBA1),hl
                ld      (MLBA1+2),hl
                ld      (MLBA1+4),hl
                ld      (MLBA2+4),hl

Mul_48bX8b_0:   ld      c,b
                ld      hl,MLBA1
                ld      b,6
                scf
                ccf
Mul_48bX8b_2:   rl      (hl)
                inc     hl
                djnz    Mul_48bX8b_2

                sla     a
                jr      nc,Mul_48bX8b_1

                ld      de,(MLBA2)
                ld      hl,(MLBA1)
                add     hl,de
                ld      (MLBA1),hl
                ld      de,(MLBA2+2)
                ld      hl,(MLBA1+2)
                adc     hl,de
                ld      (MLBA1+2),hl
                ld      de,(MLBA2+4)
                ld      hl,(MLBA1+4)
                adc     hl,de
                ld      (MLBA1+4),hl

Mul_48bX8b_1:   ld      b,c
                djnz    Mul_48bX8b_0

                ld      a,(SECTOR)          ; + SECTOR
                ld      c,a
                ld      b,0
                ld      hl,(MLBA1)
                add     hl,bc
                ld      (MLBA1),hl
                jr      nc,Add_48b_0
                ld      hl,(MLBA1+2)
                inc     hl
                ld      (MLBA1+2),hl
                jr      nc,Add_48b_0
                ld      hl,(MLBA1+4)
                inc     hl
                ld      (MLBA1+4),hl         ; = LBA
Add_48b_0:      exx
                ret
    endif

; ***************************************************************
; Z80-DMA Parameter

dma_param_st:   db      $C3             ; 0 Reset
                db      $79             ; 1 Transfer B-->A
                dw      $2100           ; 2 (MDMA_MEM_ADR) Port A Addresse
                dw      $1ff            ; 4 (MDMA_BLK_LEN) Block Laenge
                db      $54             ; 6 Port A Memory, Increasing
                db      $01             ; 7 (MDMA_MEM_FLAG) Port A: 3 Cycle, halb IORQ, halb MREQ, halb RD, halb WR
                db      $68             ; 8 Port B IO, Fixed
                db      $4E             ; 9 Port B: 2 Cycle, voll IORQ, voll MREQ, voll RD, halb WR
                db      $80             ; 10 no INT, no STOP
                db      $BD             ; 11 Conti Mode
                db      REG_DATA        ; 12 Port Low
                db      $00             ; 13 Port High
                db      $12             ; 14 Interrupt am Ende
                db      $10             ; 15 Interrupt Vektor
                db      $92             ; 16 (MDMA_MUX_FLAG) READY active High, multiplexed
                db      $CF             ; 17 Load Command
                db      $01             ; 18 (MDMA_DIR) Transfer direction
                db      $CF             ; 19 Load
                db      $87             ; 20 Start DMA
dma_param_en:

; ***************************************************************

                org     $57fc
                db      $10             ; Version 1.0
                db      $51             ; ROM-Kennung: Custom Messplatine Teil 1
                dw      0               ; CRC, diese wird spaeter mit dem CRCTOOL berechnet

; ***************************************************************
    if  CHAN2Interface=1
    include "chan2.z80"      ; echte Service-Routine fuer Kanal 2 (optional)
    else
; Dummy-Service-Routine fuer Kanal 2
Chan2:          scf                     ; Carry gesetzt heisst kein Fertig-Interrupt im Hostsystem ausloesen
                ret
    endif


; ***************************************************************

                org     $5ffc
                db      $10             ; Version 1.0
                db      $52             ; ROM-Kennung: Custom Messplatine Teil 2
                dw      0               ; CRC, diese wird spaeter mit dem CRCTOOL berechnet


